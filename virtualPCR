#!/usr/bin/env ruby

require 'bio'
require 'optimist'
require 'ZFile'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "fasta file to search", :required=>true, :type=>:string
  opt :primers, "primers fasta", :required=>true, :type=>:string
end

def deg2regexp(pat, rev=false)
  if rev 
    pat = Bio::Sequence::NA.new(pat).reverse_complement
    pat = pat.seq.upcase
  end
  npat = pat.gsub("V","[G|A|C]")
  npat = npat.gsub("B","[G|T|C]")
  npat = npat.gsub("H","[A|T|C]")
  npat = npat.gsub("D","[G|A|T]")
  npat = npat.gsub("K","[G|T]")
  npat = npat.gsub("S","[G|C]")
  npat = npat.gsub("W","[A|T]")
  npat = npat.gsub("M","[A|C]")
  npat = npat.gsub("Y","[C|T]")
  npat = npat.gsub("R","[A|G]")
  npat = npat.gsub("N","[A|C|G|T]")
  npat
end

primers = Hash.new
Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(opts.primers)).each do |seq|
  name = seq.entry_id.split("|").first
  primers[name] = [] if !primers[name]
  primers[name].push seq.seq
end

primers.keys.each do |name|
  fwd, rev = primers[name]
  if !fwd.nil?
    dfwd = deg2regexp(fwd)
    drev = deg2regexp(rev, true)
    Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(opts.input)).each do |seq|
      if seq.seq.upcase.tr("U","T") =~/((#{dfwd}).*(#{drev}))/
        amplicon, fhit, rhit = $1, $2, $3
        amplicon = Bio::Sequence::NA.new(amplicon)
        print amplicon.to_fasta(seq.definition+ " " + name, 60)
      end
    end
  end
end
