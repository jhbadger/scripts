#!/usr/bin/env ruby

require 'rubygems'
require 'optimist'
require 'ZFile'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "tax num(s)", :type=>:strings, :required=>true
  opt :file, "input is file, not tax nums themselves"
  opt :taxonomy, "use taxonomy text file from phylodb not db", :type=>:string
  opt :host, "phylodb database host", :type=>:string, :default=>"mysql-lan-pro"
  opt :nodes, "use NCBI nodes.dmp", :type=>:string
  opt :names, "use NCBI names.dmp (with nodes.dmp)", :type=>:string
  opt :minlen, "only report taxonomies with fewer than n nodes", :type=>:integer
  opt :maxlen, "only report taxonomies with more than n nodes", :type=>:integer
  opt :unused, "report unused nodes"
  opt :valid, "only report valid ranks"
  opt :len, "report taxonomy length"
  opt :verbose, "verbose messaging"
  opt :prefix, "include rank prefixes"
end

tax = Hash.new
used = Hash.new

if opts.taxonomy
  File.new(opts.taxonomy).each do |line|
    current, name, parent, rank = line.chomp.split("\t")
    tax[current.to_i] = [name, parent.to_i, rank]
  end
elsif opts.nodes
  names = Hash.new
  ZFile.new(opts.names).each do |line|
    num, name = line.chomp.split("\t|\t")
    names[num.to_i] = name if !names[num.to_i]
  end
  ZFile.new(opts.nodes).each do |line|
    current, parent, rank = line.chomp.split("\t|\t")
    tax[current.to_i] = [names[current.to_i], parent.to_i, rank]
  end
end

def isValid?(rank)
  ["kingdom","phylum","class","order","family","genus","species"].index(rank)
end

def recurseTaxonomy(tax, current, used, valid, verbose, prefix, count = 0)
  if current == 6085
    current = 6087 # Hydra magnipapillata is now Hydra vulgaris
  elsif current == 111792
    current = 1513193 # Infectious hypodermal and hematopoietic necrosis virus is now Dipteran brevidensovirus
  elsif current == 123771
    current = 999287 # Madracis mirabilis is now Madracis auretenra
  elsif current == 164037
    current = 1714273 # Thermus thermophilus phage IN93
  elsif current == 191585
    current = 191586 # Synedra acus
  elsif current == 204379
    current = 1499518 # Pseudopterogorgia bipinnata => Antillogorgia bipinnata
  elsif current == 269483
    current = 1450944 # Burkholderia sp. IBa383
  elsif current == 312062
    current = 1397670 # Tomato leaf curl Karnataka betasatellite
  elsif current == 328672
    current = 69577 # Banana streak virus
  elsif current == 508765
    current = 935198  # Clostridium botulinum B str. Eklund 17B
  elsif current == 668994
    current = 1714272 # Thermus thermophilus bacteriophage P23-77
  elsif current == 999953
    current = 5702    # Trypanosoma brucei brucei
  end
  name, parent, rank = tax[current]
  used[current] = true
  if (current == 1 || name.nil? || name == "Bacteria" || name == "Eukaryota" || name == "Viruses" || name == "Archaea" || count > 50)
    begin
      name = "k__"+ name if prefix
    rescue
      STDERR.printf("Error: %s", current)
      exit(1)
    end
    [name]
  else
    name = rank[0]+"__"+ name if prefix
    if !valid || isValid?(rank)
      print [current, name, parent, rank, 1].join("\t") + "\n" if verbose
      recurseTaxonomy(tax, parent, used, valid, verbose, prefix, count + 1).to_a + [name]
    else
      recurseTaxonomy(tax, parent, used, valid, verbose, prefix, count + 1).to_a
    end
  end
end


if (opts.file)
  ids = []
  File.new(opts.input.first).each do |line|
    id = line.chomp.split(/\s/).first.to_i
    ids.push(id)
  end
else
  ids = opts.input
end

ids.each do |id|
  tx = recurseTaxonomy(tax, id.to_i, used, opts.valid, opts.verbose,
                       opts.prefix)
  print tx.length.to_s + "\t" if opts.len
  print [id,tx.join(";")].join("\t") + "\n"
end

if opts.unused
  tax.keys.each do |key|
    if !used[key] 
      STDERR.print key.to_s + "\t" + tax[key].join("\t") + "\n"
    end 
  end
end
