#!/usr/bin/env ruby

require 'optimist'
require 'bio'
require 'Newick'

ARGV.push("--help") if ARGV.empty?
opts = Optimist::options do
  banner File.basename($0)
  opt :input, "Input tree file", :required=>true, :type=>:string
  opt :fasta, "fasta alignment file", :required=>true, :type=>:string
end

def cleanup(dir)
  system("rm -rf #{dir}")	
end

# is a fasta file DNA?
def isDNA?(fasta)
   seq = File.read(fasta, 10000).split("\n").grep(/^[^>]/).join
   seq.upcase.count("ACTGNU").to_f / seq.upcase.count("ACDEFGHIKLMNPQRSTVWYZ") > 0.90
end

# provide aliased fasta name so programs like PHYLIP don't get confused by long names
def aliasFasta(fasta, ali, out, outgroup = nil)
   outFile = File.new(out, "w")
   aliFile = File.new(ali, "w") if (!ali.nil?)
   aliHash = Hash.new
   orfNum = "SID0000001"
   Bio::FlatFile.new(Bio::FastaFormat, File.new(fasta)).each do |seq|
      newName = orfNum
      name = seq.definition.split(" ").first
      newName = "SID0000000" if (outgroup == name)
      aliFile.printf("%s\t%s\n", newName, seq.definition) if (ali)
      aliHash[newName] = seq.definition.tr("(),:","_")
      seq.definition = newName
      outFile.print seq
      orfNum = orfNum.succ if (outgroup != name)
   end
   outFile.close
   aliFile.close if (ali)
   return aliHash
end

# given a NewickTree and an alignment add ML distances
def estimateMLBranchLengths(tree, alignFile, tmpdir)
  required_programs ['puzzle']
  outgroup = tree.taxa.sort.last
  tree.reroot(tree.findNode(outgroup))
  bClades = tree.clades(true)
  fasta2Phylip(alignFile, "#{tmpdir}/infile")
  tree.write("#{tmpdir}/intree")
  treepuzzle = "puzzle infile intree"
  system("cd #{tmpdir};echo  \"y\" | #{treepuzzle} > /dev/null")
  tree = NewickTree.fromFile("#{tmpdir}/intree.tree")
  tree.reroot(tree.findNode(outgroup))
  tree.addBootStrap(bClades)
  File.unlink(tmpdir+"/intree", tmpdir+"/intree.tree", tmpdir+"/infile")
  File.unlink(tmpdir+"/intree.dist", tmpdir+"/intree.puzzle")
  return tree
end

name = File.basename(opts.fasta).split(".").first
tmpdir = ENV["HOME"] + "/.tmp"
Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
tmpdir += "/" + name + "_" + Time.now.to_f.to_s
Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
tname = tmpdir + "/" + name
dna = isDNA?(opts.fasta)
aliHash = aliasFasta(opts.fasta, nil, tname)
tree = NewickTree.fromFile(opts.tree)
tree.reAlias(aliHash)
tree.fixPhylip
tree = estimateMLBranchLengths(tree, tname, tmpdir)
tree.unAlias(aliHash)
Dir.glob("#{tname}*").each do |file|
  File.unlink(file) 
end
print tree.to_s + "\n"
cleanup(tmpdir)
 
